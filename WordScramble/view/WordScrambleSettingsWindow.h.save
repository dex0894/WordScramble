#ifndef WORDSCRAMBLESETTINGSWINDOW_H
#define WORDSCRAMBLESETTINGSWINDOW_H

#include "OKCancelWindow.h"
#include <FL/Fl.H>
#include <FL/Fl_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Output.H>
#include <FL/Fl_Text_Buffer.H>
#include <FL/Fl_Text_Display.H>
#include <FL/Fl_Button.H>

#include <vector>
#include <string>
using namespace std;

namespace view
{

class WordScrambleSettingsWindow : public OKCancelWindow
{
private:
    enum SortOrder {NAME_ASCENDING, NAME_DESCENDING, YEAR_ASCENDING, YEAR_DESCENDING, CONDITION_ASCENDING, CONDITION_DESCENDING};
    int letterCount;
    int totalTime;
    static const int SORTING_GROUPS = 3;
    static const int SORTING_TYPES_PER_GROUP = 2;
    static const int TOTAL_SORTING_METHODS = SORTING_GROUPS * SORTING_TYPES_PER_GROUP;

    vector<string> sortingGroup = {"Name", "Year", "Cond."};
    vector<string> sortingTypes = {"Ascending", "Descending"};
    string* radioSortingLabels[TOTAL_SORTING_METHODS];

    Fl_Output *sortingOutputLabel;
    Fl_Group *sortingRadioGroup;
    Fl_Button *sortingRadioGroupButton[TOTAL_SORTING_METHODS];
    SortOrder sortOrderSelection;

    void createAndDisplayRadioButtons();
    void okHandler();
    void cancelHandler();


public:
    WordScrambleSettingsWindow();
    virtual ~WordScrambleSettingsWindow();
    int getLetterCount();
    int getTotalTime();
    static void cbSortingMethodChanged(Fl_Widget* widget, void* data);
};
}
#endif // WORDSCRAMBLESETTINGSWINDOW_H
